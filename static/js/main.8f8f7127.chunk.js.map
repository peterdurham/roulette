{"version":3,"sources":["img/chip1.jpg","img/chip5.jpg","img/chip10.jpg","img/chip25.jpg","img/chip100.jpg","img/wheel.jpg","components/Stats.js","components/Slot.js","components/Table.js","components/Options.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Stats","_ref","spin","lastSpin","lastResult","playerAmount","currentTotalBet","lastWinMessages","redBack","indexOf","react_default","a","createElement","className","blackBack","greenBack","map","message","index","key","Slot","chip1Display","chip5Display","chip10Display","chip25Display","chip100Display","slotClass","betAmount","betValue","betSelected","selectBetHandler","src","chip1","alt","chip5","chip10","chip25","chip100","display","onClick","Table","betMap","topRow","topRowBets","item","current","forEach","bet","value","currentBet","middleRow","middleRowBets","bottomRow","bottomRowBets","sideLineTop","sideLineTopBets","sideLineBot","sideLineBotBets","zeroLineBets","components_Slot","Options","chipSelected","selectChip","clearBets","spinWheel","data-testid","App","state","spinResult","betResult","Object","assign","_this","totalBet","remaining","obj","setState","selectChipHandler","chip","populateBetsHandler","betMapArray","numberBets","i","push","this","concat","length","betInstance","componentDidMount","clearBetsHandler","spinWheelHandler","startingAmount","winnings","winMessages","Math","floor","random","activeBets","filter","slot","console","log","red","black","even","odd","firstHalf","secondHalf","firstThird","secondThird","thirdThird","difference","_this2","numbers","components_Stats","components_Table","components_Options","Wheel","num","App_ResultBall","number","Component","ResultBall","props","classname","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f8f7127.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chip1.8d1eda9c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/chip5.361a5d97.jpg\";","module.exports = __webpack_public_path__ + \"static/media/chip10.425589be.jpg\";","module.exports = __webpack_public_path__ + \"static/media/chip25.9bdfbc74.jpg\";","module.exports = __webpack_public_path__ + \"static/media/chip100.8dade821.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wheel.13059766.jpg\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Stats = ({\r\n  lastSpin,\r\n  lastResult,\r\n  playerAmount,\r\n  currentTotalBet,\r\n  lastWinMessages\r\n}) => {\r\n  let red = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36];\r\n  let black = [\r\n    2,\r\n    4,\r\n    6,\r\n    8,\r\n    10,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    20,\r\n    22,\r\n    24,\r\n    26,\r\n    28,\r\n    29,\r\n    31,\r\n    33,\r\n    35\r\n  ];\r\n\r\n  let redBack =\r\n    red.indexOf(lastSpin) > -1 ? (\r\n      <div className=\"red spin-result\">{lastSpin}</div>\r\n    ) : null;\r\n\r\n  let blackBack =\r\n    black.indexOf(lastSpin) > -1 ? (\r\n      <div className=\"black spin-result\">{lastSpin}</div>\r\n    ) : null;\r\n\r\n  let greenBack =\r\n    lastSpin === 0 ? <div className=\"green spin-result\">{lastSpin}</div> : null;\r\n\r\n  let spin;\r\n  if (lastResult === 0) {\r\n    spin = <div className=\"result__black\">${lastResult}</div>;\r\n  } else if (lastResult > 0) {\r\n    spin = <div className=\"result__green\">${lastResult}</div>;\r\n  } else if (lastResult < 0) {\r\n    spin = <div className=\"result__red\">${lastResult}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"stats__panel\">\r\n      <div className=\"stats__display\">\r\n        <p>\r\n          <span className=\"stats__label stats__label--player\">Player:</span>{\" \"}\r\n          <span className=\"stats__result--amount\">${playerAmount}</span>\r\n        </p>\r\n        <p>\r\n          <span className=\"stats__label\">Current Bet:</span>{\" \"}\r\n          <span className=\"stats__result--amount\">${currentTotalBet}</span>\r\n        </p>\r\n      </div>\r\n      <div className=\"stats__spin\">\r\n        <div className=\"stats__spin--label\">\r\n          <span className=\"stats__result--label\">Last Spin</span>{\" \"}\r\n          <div className=\"stats__amount--label\">{spin}</div>\r\n        </div>\r\n        <div className=\"stats__result--display\">\r\n          {redBack}\r\n          {blackBack}\r\n          {greenBack}\r\n        </div>\r\n      </div>\r\n      <div className=\"stats__result\">\r\n        <p className=\"stats__result--label\">Results:</p>\r\n        {lastWinMessages.map((message, index) => (\r\n          <p className=\"stats__result--message\" key={index}>\r\n            {message}\r\n          </p>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nStats.propTypes = {\r\n  lastSpin: PropTypes.number,\r\n  lastResult: PropTypes.number,\r\n  playerAmount: PropTypes.number.isRequired,\r\n  currentTotalBet: PropTypes.number.isRequired,\r\n  lastWinMessages: PropTypes.array.isRequired\r\n};\r\nexport default Stats;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport chip1 from \"../img/chip1.jpg\";\r\nimport chip5 from \"../img/chip5.jpg\";\r\nimport chip10 from \"../img/chip10.jpg\";\r\nimport chip25 from \"../img/chip25.jpg\";\r\nimport chip100 from \"../img/chip100.jpg\";\r\n\r\nconst Slot = ({ betAmount, betValue, betSelected, selectBetHandler }) => {\r\n  const red = [\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    12,\r\n    14,\r\n    16,\r\n    18,\r\n    19,\r\n    21,\r\n    23,\r\n    25,\r\n    27,\r\n    30,\r\n    32,\r\n    34,\r\n    36\r\n  ];\r\n  const black = [\r\n    2,\r\n    4,\r\n    6,\r\n    8,\r\n    10,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    20,\r\n    22,\r\n    24,\r\n    26,\r\n    28,\r\n    29,\r\n    31,\r\n    33,\r\n    35\r\n  ];\r\n  let greenSmall = [\"3rd row\", \"2nd row\", \"1st row\"];\r\n  let greenMiddle = [\"1-18\", \"EVEN\", \"Red\", \"Black\", \"ODD\", \"19-36\"];\r\n  let greenLarge = [\"1st 12\", \"2nd 12\", \"3rd 12\"];\r\n\r\n  let chip1Display, chip5Display, chip10Display, chip25Display, chip100Display;\r\n\r\n  if (betAmount === 1) {\r\n    chip1Display = <img className=\"chip__small\" src={chip1} alt=\"chip1\" />;\r\n  } else if (betAmount === 5) {\r\n    chip5Display = <img className=\"chip__small\" src={chip5} alt=\"chip1\" />;\r\n  } else if (betAmount === 10) {\r\n    chip10Display = <img className=\"chip__small\" src={chip10} alt=\"chip\" />;\r\n  } else if (betAmount === 25) {\r\n    chip25Display = <img className=\"chip__small\" src={chip25} alt=\"chip\" />;\r\n  } else if (betAmount === 100) {\r\n    chip100Display = <img className=\"chip__small\" src={chip100} alt=\"cp\" />;\r\n  }\r\n\r\n  let slotClass;\r\n\r\n  if (red.indexOf(betValue) > -1) {\r\n    slotClass =\r\n      \"board-number red\" + (betSelected === betValue ? \" selected\" : \"\");\r\n  } else if (black.indexOf(betValue) > -1) {\r\n    slotClass =\r\n      \"board-number black\" + (betSelected === betValue ? \" selected\" : \"\");\r\n  } else if (greenSmall.indexOf(betValue) > -1) {\r\n    slotClass = \"row-bet\" + (betSelected === betValue ? \" selected\" : \"\");\r\n  } else if (greenMiddle.indexOf(betValue) > -1) {\r\n    slotClass =\r\n      \"one-of-two-bet\" + (betSelected === betValue ? \" selected\" : \"\");\r\n  } else if (greenLarge.indexOf(betValue) > -1) {\r\n    slotClass = \"thirds-bet\" + (betSelected === betValue ? \" selected\" : \"\");\r\n  } else if (betValue === 0 || betValue === \"0\") {\r\n    slotClass =\r\n      \"zero__bet\" + (betSelected === betValue ? \" selected__zero\" : \"\");\r\n  }\r\n\r\n  let display = (\r\n    <div className={slotClass} onClick={() => selectBetHandler(betValue)}>\r\n      {betValue}\r\n      {chip1Display}\r\n      {chip5Display}\r\n      {chip10Display}\r\n      {chip25Display}\r\n      {chip100Display}\r\n    </div>\r\n  );\r\n\r\n  return <div className=\"board__chips\">{display}</div>;\r\n};\r\n\r\nSlot.propTypes = {\r\n  betAmount: PropTypes.number,\r\n  betValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  betSelected: PropTypes.string,\r\n  selectBetHandler: PropTypes.func\r\n};\r\n\r\nexport default Slot;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Slot from \"./Slot\";\r\n\r\nconst Table = ({ betMap, betSelected, selectBetHandler }) => {\r\n  let topRow = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, \"3rd row\"];\r\n  let topRowBets = topRow.map(item => {\r\n    let current = null;\r\n    betMap.forEach(bet => {\r\n      if (bet.value === item) {\r\n        current = bet.currentBet;\r\n      }\r\n    });\r\n    return current;\r\n  });\r\n\r\n  let middleRow = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, \"2nd row\"];\r\n  let middleRowBets = middleRow.map(item => {\r\n    let current = null;\r\n    betMap.forEach(bet => {\r\n      if (bet.value === item) {\r\n        current = bet.currentBet;\r\n      }\r\n    });\r\n    return current;\r\n  });\r\n\r\n  let bottomRow = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, \"1st row\"];\r\n  let bottomRowBets = bottomRow.map(item => {\r\n    let current = null;\r\n    betMap.forEach(bet => {\r\n      if (bet.value === item) {\r\n        current = bet.currentBet;\r\n      }\r\n    });\r\n    return current;\r\n  });\r\n\r\n  let sideLineTop = [\"1st 12\", \"2nd 12\", \"3rd 12\"];\r\n  let sideLineTopBets = sideLineTop.map(item => {\r\n    let current = null;\r\n    betMap.forEach(bet => {\r\n      if (bet.value === item) {\r\n        current = bet.currentBet;\r\n      }\r\n    });\r\n    return current;\r\n  });\r\n\r\n  let sideLineBot = [\"1-18\", \"EVEN\", \"Red\", \"Black\", \"ODD\", \"19-36\"];\r\n  let sideLineBotBets = sideLineBot.map(item => {\r\n    let current = null;\r\n    betMap.forEach(bet => {\r\n      if (bet.value === item) {\r\n        current = bet.currentBet;\r\n      }\r\n    });\r\n    return current;\r\n  });\r\n\r\n  let zeroLine = [0];\r\n  let zeroLineBets = zeroLine.map(item => {\r\n    let current = null;\r\n    betMap.forEach(bet => {\r\n      if (bet.value === item) {\r\n        current = bet.currentBet;\r\n      }\r\n    });\r\n    return current;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"board\">\r\n        <div>\r\n          <Slot\r\n            betValue={0}\r\n            betSelected={betSelected}\r\n            selectBetHandler={selectBetHandler}\r\n            betAmount={zeroLineBets[0]}\r\n          />\r\n        </div>\r\n        <div className=\"topthree__rows\">\r\n          <div className=\"top-row\">\r\n            {topRow.map((bet, index) => (\r\n              <Slot\r\n                key={bet}\r\n                betValue={bet}\r\n                betSelected={betSelected}\r\n                selectBetHandler={selectBetHandler}\r\n                betAmount={topRowBets[index]}\r\n              />\r\n            ))}\r\n          </div>\r\n          <div className=\"middle-row\">\r\n            {middleRow.map((bet, index) => (\r\n              <Slot\r\n                key={bet}\r\n                betValue={bet}\r\n                betSelected={betSelected}\r\n                selectBetHandler={selectBetHandler}\r\n                betAmount={middleRowBets[index]}\r\n              />\r\n            ))}\r\n          </div>\r\n          <div className=\"bottom-row\">\r\n            {bottomRow.map((bet, index) => (\r\n              <Slot\r\n                key={bet}\r\n                betValue={bet}\r\n                betSelected={betSelected}\r\n                selectBetHandler={selectBetHandler}\r\n                betAmount={bottomRowBets[index]}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"side-line-1\">\r\n          {sideLineTop.map((bet, index) => (\r\n            <Slot\r\n              key={bet}\r\n              betValue={bet}\r\n              betSelected={betSelected}\r\n              selectBetHandler={selectBetHandler}\r\n              betAmount={sideLineTopBets[index]}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"side-line-2\">\r\n          {sideLineBot.map((bet, index) => (\r\n            <Slot\r\n              key={bet}\r\n              betValue={bet}\r\n              betSelected={betSelected}\r\n              selectBetHandler={selectBetHandler}\r\n              betAmount={sideLineBotBets[index]}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nTable.propTypes = {\r\n  betMap: PropTypes.array.isRequired,\r\n  betSelected: PropTypes.string,\r\n  selectBetHandler: PropTypes.func.isRequired\r\n};\r\nexport default Table;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport chip1 from \"../img/chip1.jpg\";\r\nimport chip5 from \"../img/chip5.jpg\";\r\nimport chip10 from \"../img/chip10.jpg\";\r\nimport chip25 from \"../img/chip25.jpg\";\r\nimport chip100 from \"../img/chip100.jpg\";\r\n\r\nconst Options = ({ chipSelected, selectChip, clearBets, spinWheel }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"bet__options\">\r\n        <div className=\"bet__options--label\">Select bet: </div>\r\n        <div\r\n          className={\"bet__chips\" + (chipSelected === 100 && \" bet__selected\")}\r\n          onClick={() => selectChip(100)}\r\n        >\r\n          <img className=\"bet__image\" src={chip100} alt=\"100 chip\" />\r\n        </div>\r\n        <div\r\n          data-testid=\"bet-25\"\r\n          className={\"bet__chips\" + (chipSelected === 25 && \" bet__selected\")}\r\n          onClick={() => selectChip(25)}\r\n        >\r\n          <img className=\"bet__image\" src={chip25} alt=\"25 chip\" />\r\n        </div>\r\n        <div\r\n          className={\"bet__chips\" + (chipSelected === 10 && \" bet__selected\")}\r\n          onClick={() => selectChip(10)}\r\n        >\r\n          <img className=\"bet__image\" src={chip10} alt=\"10 chip\" />\r\n        </div>\r\n        <div\r\n          className={\"bet__chips\" + (chipSelected === 5 && \" bet__selected\")}\r\n          onClick={() => selectChip(5)}\r\n        >\r\n          <img className=\"bet__image\" src={chip5} alt=\"5 chip\" />\r\n        </div>\r\n        <div\r\n          className={\"bet__chips\" + (chipSelected === 1 && \" bet__selected\")}\r\n          onClick={() => selectChip(1)}\r\n        >\r\n          <img className=\"bet__image\" src={chip1} alt=\"1 chip\" />\r\n        </div>\r\n      </div>\r\n      <button className=\"button\" onClick={() => clearBets()}>\r\n        Clear bets\r\n      </button>\r\n      <button className=\"button\" onClick={() => spinWheel()}>\r\n        Spin\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nOptions.propTypes = {\r\n  chipSelected: PropTypes.number,\r\n  selectChip: PropTypes.func.isRequired,\r\n  clearBets: PropTypes.func.isRequired,\r\n  spinWheel: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Options;\r\n","import React, { Component } from \"react\";\nimport \"./style.scss\";\n\nimport Stats from \"./components/Stats\";\nimport Table from \"./components/Table\";\nimport Wheel from \"./img/wheel.jpg\";\nimport Options from \"./components/Options\";\n\nclass App extends Component {\n  state = {\n    playerAmount: 500,\n    betMap: [],\n    spinResult: \"\",\n    betResult: \"\",\n    chipSelected: null,\n    currentTotalBet: 0,\n    lastSpin: null,\n    lastResult: null,\n    lastWinMessages: []\n  };\n\n  selectBetHandler = bet => {\n    let betMap = Object.assign([], this.state.betMap);\n    let chipSelected = this.state.chipSelected;\n    let playerAmount = this.state.playerAmount;\n    let totalBet = this.state.currentTotalBet;\n    let remaining = playerAmount - totalBet;\n\n    betMap.forEach(function(obj) {\n      if (\n        obj.value === bet &&\n        obj.currentBet === null &&\n        remaining >= chipSelected\n      ) {\n        if (playerAmount >= chipSelected) {\n          obj.currentBet = chipSelected;\n          totalBet += chipSelected;\n        }\n      } else if (obj.value === bet && obj.currentBet !== chipSelected) {\n        totalBet -= obj.currentBet;\n        obj.currentBet = null;\n      } else if (obj.value === bet && obj.currentBet === chipSelected) {\n        obj.currentBet = null;\n        totalBet -= chipSelected;\n      }\n    });\n\n    this.setState(() => ({\n      betMap,\n      currentTotalBet: totalBet,\n      playerAmount: playerAmount\n    }));\n  };\n\n  selectChipHandler = bet => {\n    let chip;\n    if (this.state.chipSelected === null || this.state.chipSelected !== bet) {\n      chip = bet;\n    } else if (this.state.chipSelected === bet) {\n      chip = null;\n    }\n    this.setState(() => ({ chipSelected: chip }));\n  };\n\n  populateBetsHandler = () => {\n    //define arrays for bet label, and object array\n    let betMapArray = [];\n    let numberBets = [];\n    let betMap = [];\n\n    //create array of all bet labels\n    for (let i = 0; i <= 36; i++) {\n      numberBets.push(i);\n    }\n    let wordBets = [\n      \"3rd row\",\n      \"2nd row\",\n      \"1st row\",\n      \"1st 12\",\n      \"2nd 12\",\n      \"3rd 12\",\n      \"1-18\",\n      \"EVEN\",\n      \"Red\",\n      \"Black\",\n      \"ODD\",\n      \"19-36\"\n    ];\n    betMapArray = numberBets.concat(wordBets);\n\n    //constructor for bet slot objects, push to array\n    function Slot(value, currentBet) {\n      this.value = value;\n      this.currentBet = currentBet;\n    }\n    for (let i = 0; i < betMapArray.length; i++) {\n      let betInstance = new Slot(betMapArray[i], null);\n      betMap.push(betInstance);\n    }\n\n    this.setState(() => ({ betMap, chipSelected: null }));\n  };\n\n  componentDidMount = () => {\n    this.populateBetsHandler();\n  };\n\n  clearBetsHandler = () => {\n    this.setState(() => ({ currentTotalBet: 0 }));\n    this.populateBetsHandler();\n  };\n\n  spinWheelHandler = () => {\n    let playerAmount = this.state.playerAmount;\n    let startingAmount = this.state.playerAmount;\n    let totalBet = this.state.currentTotalBet;\n    let betMap = this.state.betMap;\n    let winnings = 0;\n    let winMessages = [];\n\n    let spin = Math.floor(Math.random() * 37);\n    let activeBets = betMap.filter(slot => slot.currentBet);\n\n    if (totalBet > playerAmount) {\n      return console.log(\"not enough to play\");\n    }\n\n    playerAmount -= totalBet;\n\n    let topRow = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, \"3rd row\"];\n    let middleRow = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, \"2nd row\"];\n    let bottomRow = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, \"1st row\"];\n    let red = [\n      1,\n      3,\n      5,\n      7,\n      9,\n      12,\n      14,\n      16,\n      18,\n      19,\n      21,\n      23,\n      25,\n      27,\n      30,\n      32,\n      34,\n      36\n    ];\n    let black = [\n      2,\n      4,\n      6,\n      8,\n      10,\n      11,\n      13,\n      15,\n      17,\n      20,\n      22,\n      24,\n      26,\n      28,\n      29,\n      31,\n      33,\n      35\n    ];\n    let even = [\n      2,\n      4,\n      6,\n      8,\n      10,\n      12,\n      14,\n      16,\n      18,\n      20,\n      22,\n      24,\n      26,\n      28,\n      30,\n      32,\n      34,\n      36\n    ];\n    let odd = [\n      1,\n      3,\n      5,\n      7,\n      9,\n      11,\n      13,\n      15,\n      17,\n      19,\n      21,\n      23,\n      25,\n      27,\n      29,\n      31,\n      33,\n      35\n    ];\n    let firstHalf = [\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10,\n      11,\n      12,\n      13,\n      14,\n      15,\n      16,\n      17,\n      18\n    ];\n    let secondHalf = [\n      19,\n      20,\n      21,\n      22,\n      23,\n      24,\n      25,\n      26,\n      27,\n      28,\n      29,\n      30,\n      31,\n      32,\n      33,\n      34,\n      35,\n      36\n    ];\n    let firstThird = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n    let secondThird = [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24];\n    let thirdThird = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36];\n\n    activeBets.forEach(bet => {\n      if (bet.value > 0 && bet.value === spin) {\n        winnings += 36 * bet.currentBet;\n        winMessages.push(`You won $${bet.currentBet * 36} on ${bet.value}`);\n      } else if (bet.value === 0 && spin === 0) {\n        winnings += 36 * bet.currentBet;\n        winMessages.push(`You won $${bet.currentBet * 36} on ${bet.value}`);\n      } else if (bet.value === \"3rd row\" && topRow.indexOf(spin) > -1) {\n        winnings += 3 * bet.currentBet;\n        winMessages.push(`You won $${bet.currentBet * 3} on ${bet.value}`);\n      } else if (bet.value === \"2nd row\" && middleRow.indexOf(spin) > -1) {\n        winnings += 3 * bet.currentBet;\n        winMessages.push(`You won $${bet.currentBet * 3} on ${bet.value}`);\n      } else if (bet.value === \"1st row\" && bottomRow.indexOf(spin) > -1) {\n        winnings += 3 * bet.currentBet;\n        winMessages.push(`You won $${bet.currentBet * 3} on ${bet.value}`);\n      } else if (bet.value === \"Red\" && red.indexOf(spin) > -1) {\n        winnings += 2 * bet.currentBet;\n        winMessages.push(`You won $${bet.currentBet * 2} on ${bet.value}`);\n      } else if (bet.value === \"Black\" && black.indexOf(spin) > -1) {\n        winnings += 2 * bet.currentBet;\n        winMessages.push(`You won $${bet.currentBet * 2} on ${bet.value}`);\n      } else if (bet.value === \"EVEN\" && even.indexOf(spin) > -1) {\n        winnings += 2 * bet.currentBet;\n        winMessages.push(`You won $${bet.currentBet * 2} on ${bet.value}`);\n      } else if (bet.value === \"ODD\" && odd.indexOf(spin) > -1) {\n        winnings += 2 * bet.currentBet;\n        winMessages.push(`You won $${bet.currentBet * 2} on ${bet.value}`);\n      } else if (bet.value === \"1st 12\" && firstThird.indexOf(spin) > -1) {\n        winnings += 3 * bet.currentBet;\n        winMessages.push(`You won $${bet.currentBet * 3} on ${bet.value}`);\n      } else if (bet.value === \"2nd 12\" && secondThird.indexOf(spin) > -1) {\n        winnings += 3 * bet.currentBet;\n        winMessages.push(`You won $${bet.currentBet * 3} on ${bet.value}`);\n      } else if (bet.value === \"3rd 12\" && thirdThird.indexOf(spin) > -1) {\n        winnings += 3 * bet.currentBet;\n        winMessages.push(`You won $${bet.currentBet * 3} on ${bet.value}`);\n      } else if (bet.value === \"1-18\" && firstHalf.indexOf(spin) > -1) {\n        winnings += 2 * bet.currentBet;\n        winMessages.push(`You won $${bet.currentBet * 2} on ${bet.value}`);\n      } else if (bet.value === \"19-36\" && secondHalf.indexOf(spin) > -1) {\n        winnings += 2 * bet.currentBet;\n        winMessages.push(`You won $${bet.currentBet * 2} on ${bet.value}`);\n      }\n\n      playerAmount += winnings;\n      let difference = playerAmount - startingAmount;\n      winnings = 0;\n\n      this.setState(() => ({\n        playerAmount,\n        lastSpin: spin,\n        lastResult: difference,\n        lastWinMessages: winMessages\n      }));\n    });\n  };\n\n  render() {\n    let numbers = [];\n    for (let i = 0; i < 37; i++) {\n      numbers.push(i);\n    }\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"header\">Roulette</h1>\n\n        <div className=\"screen\">\n          <div className=\"game\">\n            <div className=\"display\">\n              <Stats\n                playerAmount={this.state.playerAmount}\n                currentTotalBet={this.state.currentTotalBet}\n                lastResult={this.state.lastResult}\n                lastWinMessages={this.state.lastWinMessages}\n                lastSpin={this.state.lastSpin}\n              />\n              <Table\n                lastSpin={this.state.lastSpin}\n                betSelected={this.state.betSelected}\n                selectBetHandler={this.selectBetHandler}\n                betMap={this.state.betMap}\n              />\n            </div>\n            <Options\n              chipSelected={this.state.chipSelected}\n              selectChip={this.selectChipHandler}\n              clearBets={this.clearBetsHandler}\n              spinWheel={this.spinWheelHandler}\n            />\n          </div>\n          <div className=\"wheel__display\">\n            <img className=\"wheel__image\" src={Wheel} alt=\"wheel\" />\n            {numbers.map(num => (\n              <ResultBall\n                key={num}\n                number={num}\n                lastSpin={this.state.lastSpin}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst ResultBall = props => {\n  let classname;\n  if (props.lastSpin === props.number) {\n    classname = `ball ball__${props.number}`;\n  }\n\n  return <div className={classname} />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}